version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy  backend  stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy  frontend  stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            npm install
            SUCCESS=$(curl  https://kvdb.io/KZCdTiU6MrRPT9pvBNgBuJ/MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >>
            
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backed-end test
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
             # Your code here
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backed-end scan
          command: |
             # Your code here
             cd backend
             npm install
             npm audit fix --audit-level=critical --force 
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
             # Your code here
             yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL in kvdb.io 
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            curl  -d "http://$BACKEND_IP:3030" https://kvdb.io/KZCdTiU6MrRPT9pvBNgBuJ/BACKEND_URL
      - run:
          name: Add back-end ip to ansible inventory.txt
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail     

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7f:6f:b8:c2:dc:3d:5a:32:9c:99:25:0b:dc:9d:91:cf"]
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            # Your code here
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: prepare environment for backend build
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
      - run:
          name: run migration
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt 
      - run:
          name: send migration to kvdb
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully." migrations_dump.txt
             then
               curl --insecure -d "success" https://kvdb.io/KZCdTiU6MrRPT9pvBNgBuJ/MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
               curl --insecure -d "success" https://kvdb.io/KZCdTiU6MrRPT9pvBNgBuJ/MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl https://kvdb.io/KZCdTiU6MrRPT9pvBNgBuJ/BACKEND_URL)
            echo "${API_URL}"
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
                    
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7f:6f:b8:c2:dc:3d:5a:32:9c:99:25:0b:dc:9d:91:cf"]
      - restore_cache:
          keys: [ backend-build ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version 
      
      - run:
          name: Configure Server
          no_output_timeout: 60m
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Deploy backend
          no_output_timeout: 60m
          command: |
            # your code here
            mkdir .circleci/ansible/roles/deploy/files
            zip -r backend.zip ./backend
            cp backend.zip .circleci/ansible/roles/deploy/files

            # cd backend
            # npm install
            # npm run build
            # cd ..
            # tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            cd backend
            export BACKEND_URL=$(curl https://kvdb.io/KZCdTiU6MrRPT9pvBNgBuJ/BACKEND_URL)
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            cd backend
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
            # cd backend
            # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/index.html"
            # curl -s ${URL} | grep -q "Welcome"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/KZCdTiU6MrRPT9pvBNgBuJ/old_workflow_id -d "${OLD_WORKFLOW_ID}"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "InitialStack" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 
 
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install jq tar gzip git curl
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo "${STACKS}"
            if [[ "${STACKS[@]}" != "${OldWorkflowID}" ]]
            then
              echo "start clean up"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else 
              echo "Cannot cleanup"
            fi           
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 
 
workflows:
  default:
    jobs:
      - notify:
          context: slack-secrets  
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]